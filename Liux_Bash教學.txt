命令別名設定功能： (alias)
alias lm='ls -al'

查詢指令是否為 Bash shell 的內建命令： type
[dmtsai@study ~]$ type [-tpa] name
選項與參數：
    ：不加任何選項與參數時，type 會顯示出 name 是外部指令還是 bash 內建指令
-t  ：當加入 -t 參數時，type 會將 name 以底下這些字眼顯示出他的意義：
      file    ：表示為外部指令；
      alias   ：表示該指令為命令別名所設定的名稱；
      builtin ：表示該指令為 bash 內建的指令功能；
-p  ：如果後面接的 name 為外部指令時，才會顯示完整檔名；
-a  ：會由 PATH 變數定義的路徑中，將所有含 name 的指令都列出來，包含 alias

範例一：查詢一下 ls 這個指令是否為 bash 內建？
[dmtsai@study ~]$ type ls
ls is aliased to `ls --color=auto' <==未加任何參數，列出 ls 的最主要使用情況
[dmtsai@study ~]$ type -t ls
alias                              <==僅列出 ls 執行時的依據
[dmtsai@study ~]$ type -a ls
ls is aliased to `ls --color=auto' <==最先使用 aliase
ls is /usr/bin/ls                  <==還有找到外部指令在 /bin/ls

範例二：那麼 cd 呢？
[dmtsai@study ~]$ type cd
cd is a shell builtin              <==看到了嗎？ cd 是 shell 內建指令

變數的取用與設定：echo, 變數設定規則, unset
[dmtsai@study ~]$ echo $variable
[dmtsai@study ~]$ echo $PATH
/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin
[dmtsai@study ~]$ echo ${PATH}  # 近年來，鳥哥比較偏向使用這種格式喔！

例題：
請在螢幕上面顯示出您的環境變數 HOME 與 MAIL：
答：
echo $HOME 或者是 echo ${HOME}
echo $MAIL 或者是 echo ${MAIL}

[dmtsai@study ~]$ echo ${myname}
       <==這裡並沒有任何資料～因為這個變數尚未被設定！是空的！
[dmtsai@study ~]$ myname=VBird
[dmtsai@study ~]$ echo ${myname}
VBird  <==出現了！因為這個變數已經被設定了！

變數的設定規則
變數與變數內容以一個等號『=』來連結，如下所示： 
『myname=VBird』

等號兩邊不能直接接空白字元，如下所示為錯誤： 
『myname = VBird』或『myname=VBird Tsai』

變數名稱只能是英文字母與數字，但是開頭字元不能是數字，如下為錯誤： 
『2myname=VBird』

變數內容若有空白字元可使用雙引號『"』或單引號『'』將變數內容結合起來，但
雙引號內的特殊字元如 $ 等，可以保有原本的特性，如下所示：
『var="lang is $LANG"』則『echo $var』可得『lang is zh_TW.UTF-8』
單引號內的特殊字元則僅為一般字元 (純文字)，如下所示：
『var='lang is $LANG'』則『echo $var』可得『lang is $LANG』

可用跳脫字元『 \ 』將特殊符號(如 [Enter], $, \, 空白字元, '等)變成一般字元，如：
『myname=VBird\ Tsai』

在一串指令的執行中，還需要藉由其他額外的指令所提供的資訊時，可以使用反單引號『`指令`』或 『$(指令)』。特別注意，那個 ` 是鍵盤上方的數字鍵 1 左邊那個按鍵，而不是單引號！ 例如想要取得核心版本的設定：
『version=$(uname -r)』再『echo $version』可得『3.10.0-229.el7.x86_64』

若該變數為擴增變數內容時，則可用 "$變數名稱" 或 ${變數} 累加內容，如下所示：
『PATH="$PATH":/home/bin』或『PATH=${PATH}:/home/bin』

若該變數需要在其他子程序執行，則需要以 export 來使變數變成環境變數：
『export PATH』

通常大寫字元為系統預設變數，自行設定變數可以使用小寫字元，方便判斷 (純粹依照使用者興趣與嗜好) ；

取消變數的方法為使用 unset ：『unset 變數名稱』例如取消 myname 的設定：
『unset myname』


範例一：設定一變數 name ，且內容為 VBird
[dmtsai@study ~]$ 12name=VBird
bash: 12name=VBird: command not found...  <==螢幕會顯示錯誤！因為不能以數字開頭！
[dmtsai@study ~]$ name = VBird            <==還是錯誤！因為有空白！
[dmtsai@study ~]$ name=VBird              <==OK 的啦！

範例二：承上題，若變數內容為 VBird's name 呢，就是變數內容含有特殊符號時：
[dmtsai@study ~]$ name=VBird's name  
# 單引號與雙引號必須要成對，在上面的設定中僅有一個單引號，因此當你按下 enter 後，
# 你還可以繼續輸入變數內容。這與我們所需要的功能不同，失敗啦！
# 記得，失敗後要復原請按下 [ctrl]-c 結束！
[dmtsai@study ~]$ name="VBird's name"    <==OK 的啦！
# 指令是由左邊向右找→，先遇到的引號先有用，因此如上所示， 單引號變成一般字元！
[dmtsai@study ~]$ name='VBird's name'    <==失敗的啦！
# 因為前兩個單引號已成對，後面就多了一個不成對的單引號了！因此也就失敗了！
[dmtsai@study ~]$ name=VBird\'s\ name     <==OK 的啦！
# 利用反斜線 (\) 跳脫特殊字元，例如單引號與空白鍵，這也是 OK 的啦！

範例三：我要在 PATH 這個變數當中『累加』:/home/dmtsai/bin 這個目錄
[dmtsai@study ~]$ PATH=$PATH:/home/dmtsai/bin
[dmtsai@study ~]$ PATH="$PATH":/home/dmtsai/bin
[dmtsai@study ~]$ PATH=${PATH}:/home/dmtsai/bin
# 上面這三種格式在 PATH 裡頭的設定都是 OK 的！但是底下的例子就不見得囉！

範例四：承範例三，我要將 name 的內容多出 "yes" 呢？
[dmtsai@study ~]$ name=$nameyes  
# 知道了吧？如果沒有雙引號，那麼變數成了啥？name 的內容是 $nameyes 這個變數！
# 呵呵！我們可沒有設定過 nameyes 這個變數吶！所以，應該是底下這樣才對！
[dmtsai@study ~]$ name="$name"yes
[dmtsai@study ~]$ name=${name}yes  <==以此例較佳！

範例五：如何讓我剛剛設定的 name=VBird 可以用在下個 shell 的程序？
[dmtsai@study ~]$ name=VBird
[dmtsai@study ~]$ bash        <==進入到所謂的子程序
[dmtsai@study ~]$ echo $name  <==子程序：再次的 echo 一下；
       <==嘿嘿！並沒有剛剛設定的內容喔！
[dmtsai@study ~]$ exit        <==子程序：離開這個子程序
[dmtsai@study ~]$ export name
[dmtsai@study ~]$ bash        <==進入到所謂的子程序
[dmtsai@study ~]$ echo $name  <==子程序：在此執行！
VBird  <==看吧！出現設定值了！
[dmtsai@study ~]$ exit        <==子程序：離開這個子程序

範例六：如何進入到您目前核心的模組目錄？
[dmtsai@study ~]$ cd /lib/modules/`uname -r`/kernel
[dmtsai@study ~]$ cd /lib/modules/$(uname -r)/kernel  # 以此例較佳！

範例七：取消剛剛設定的 name 這個變數內容
[dmtsai@study ~]$ unset name

在變數的設定當中，單引號與雙引號的用途有何不同？
[dmtsai@study ~]$ name=VBird
[dmtsai@study ~]$ echo $name
VBird
[dmtsai@study ~]$ myname="$name its me"
[dmtsai@study ~]$ echo $myname
VBird its me
[dmtsai@study ~]$ myname='$name its me'
[dmtsai@study ~]$ echo $myname
$name its me

環境變數的功能
範例一：列出目前的 shell 環境下的所有環境變數與其內容。
[dmtsai@study ~]$ env
HOSTNAME=study.centos.vbird    <== 這部主機的主機名稱
TERM=xterm                     <== 這個終端機使用的環境是什麼類型
SHELL=/bin/bash                <== 目前這個環境下，使用的 Shell 是哪一個程式？
HISTSIZE=1000                  <== 『記錄指令的筆數』在 CentOS 預設可記錄 1000 筆
OLDPWD=/home/dmtsai            <== 上一個工作目錄的所在
LC_ALL=en_US.utf8              <== 由於語系的關係，鳥哥偷偷丟上來的一個設定
USER=dmtsai                    <== 使用者的名稱啊！
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:
or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:
*.tar=01...                    <== 一些顏色顯示
MAIL=/var/spool/mail/dmtsai    <== 這個使用者所取用的 mailbox 位置
PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin
PWD=/home/dmtsai               <== 目前使用者所在的工作目錄 (利用 pwd 取出！)
LANG=zh_TW.UTF-8               <== 這個與語系有關，底下會再介紹！
HOME=/home/dmtsai              <== 這個使用者的家目錄啊！
LOGNAME=dmtsai                 <== 登入者用來登入的帳號名稱
_=/usr/bin/env                 <== 上一次使用的指令的最後一個參數(或指令本身



[dmtsai@study ~]$ declare [-aixr] variable
選項與參數：
-a  ：將後面名為 variable 的變數定義成為陣列 (array) 類型
-i  ：將後面名為 variable 的變數定義成為整數數字 (integer) 類型
-x  ：用法與 export 一樣，就是將後面的 variable 變成環境變數；
-r  ：將變數設定成為 readonly 類型，該變數不可被更改內容，也不能 unset

範例一：讓變數 sum 進行 100+300+50 的加總結果
[dmtsai@study ~]$ sum=100+300+50
[dmtsai@study ~]$ echo ${sum}
100+300+50  <==咦！怎麼沒有幫我計算加總？因為這是文字型態的變數屬性啊！
[dmtsai@study ~]$ declare -i sum=100+300+50
[dmtsai@study ~]$ echo ${sum}
450         <==瞭乎？？

範例二：將 sum 變成環境變數
[dmtsai@study ~]$ declare -x sum
[dmtsai@study ~]$ export | grep sum
declare -ix sum="450"  <==果然出現了！包括有 i 與 x 的宣告！

範例三：讓 sum 變成唯讀屬性，不可更動！
[dmtsai@study ~]$ declare -r sum
[dmtsai@study ~]$ sum=tesgting
-bash: sum: readonly variable  <==老天爺～不能改這個變數了！

範例四：讓 sum 變成非環境變數的自訂變數吧！
[dmtsai@study ~]$ declare +x sum  <== 將 - 變成 + 可以進行『取消』動作
[dmtsai@study ~]$ declare -p sum  <== -p 可以單獨列出變數的類型
declare -ir sum="450" <== 看吧！只剩下 i, r 的類型，不具有 x 囉！

陣列 (array) 變數類型
範例：設定上面提到的 var[1] ～ var[3] 的變數。
[dmtsai@study ~]$ var[1]="small min"
[dmtsai@study ~]$ var[2]="big min"
[dmtsai@study ~]$ var[3]="nice min"
[dmtsai@study ~]$ echo "${var[1]}, ${var[2]}, ${var[3]}"
small min, big min, nice min

變數內容的刪除、取代與替換 (Optional)
${variable#/*local/bin:}
   上面的特殊字體部分是關鍵字！用在這種刪除模式所必須存在的

${variable#/*local/bin:}
   這就是原本的變數名稱，以上面範例二來說，這裡就填寫 path 這個『變數名稱』啦！

${variable#/*local/bin:}
   這是重點！代表『從變數內容的最前面開始向右刪除』，且僅刪除最短的那個

${variable#/*local/bin:}
   代表要被刪除的部分，由於 # 代表由前面開始刪除，所以這裡便由開始的 / 寫起。
   需要注意的是，我們還可以透過萬用字元 * 來取代 0 到無窮多個任意字元

   以上面範例二的結果來看， path 這個變數被刪除的內容如下所示：
/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin

範例三：我想要刪除前面所有的目錄，僅保留最後一個目錄
[dmtsai@study ~]$ echo ${path#/*:}
/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin
# 由於一個 # 僅刪除掉最短的那個，因此他刪除的情況可以用底下的刪除線來看：
# /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin

[dmtsai@study ~]$ echo ${path##/*:}
/home/dmtsai/bin
# 嘿！多加了一個 # 變成 ## 之後，他變成『刪除掉最長的那個資料』！亦即是：
# /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin

# ：符合取代文字的『最短的』那一個；
##：符合取代文字的『最長的』那一個

範例四：我想要刪除最後面那個目錄，亦即從 : 到 bin 為止的字串
[dmtsai@study ~]$ echo ${path%:*bin}
/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin
# 注意啊！最後面一個目錄不見去！
# 這個 % 符號代表由最後面開始向前刪除！所以上面得到的結果其實是來自如下：
# /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin

範例五：那如果我只想要保留第一個目錄呢？
[dmtsai@study ~]$ echo ${path%%:*bin}
/usr/local/bin
# 同樣的， %% 代表的則是最長的符合字串，所以結果其實是來自如下：
# /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin

範例六：將 path 的變數內容內的 sbin 取代成大寫 SBIN：
[dmtsai@study ~]$ echo ${path/sbin/SBIN}
/usr/local/bin:/usr/bin:/usr/local/SBIN:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin
# 這個部分就容易理解的多了！關鍵字在於那兩個斜線，兩斜線中間的是舊字串
# 後面的是新字串，所以結果就會出現如上述的特殊字體部分囉！

[dmtsai@study ~]$ echo ${path//sbin/SBIN}
/usr/local/bin:/usr/bin:/usr/local/SBIN:/usr/SBIN:/home/dmtsai/.local/bin:/home/dmtsai/bin
# 如果是兩條斜線，那麼就變成所有符合的內容都會被取代喔！

變數設定方式	說明
${變數#關鍵字}
${變數##關鍵字}	若變數內容從頭開始的資料符合『關鍵字』，則將符合的最短資料刪除
若變數內容從頭開始的資料符合『關鍵字』，則將符合的最長資料刪除
${變數%關鍵字}
${變數%%關鍵字}	若變數內容從尾向前的資料符合『關鍵字』，則將符合的最短資料刪除
若變數內容從尾向前的資料符合『關鍵字』，則將符合的最長資料刪除
${變數/舊字串/新字串}
${變數//舊字串/新字串}	若變數內容符合『舊字串』則『第一個舊字串會被新字串取代』
若變數內容符合『舊字串』則『全部的舊字串會被新字串取代』

變數的測試與內容替換
範例一：測試一下是否存在 username 這個變數，若不存在則給予 username 內容為 root
[dmtsai@study ~]$ echo ${username}
           <==由於出現空白，所以 username 可能不存在，也可能是空字串
[dmtsai@study ~]$ username=${username-root}
[dmtsai@study ~]$ echo ${username}
root       <==因為 username 沒有設定，所以主動給予名為 root 的內容。
[dmtsai@study ~]$ username="vbird tsai" <==主動設定 username 的內容
[dmtsai@study ~]$ username=${username-root}
[dmtsai@study ~]$ echo ${username}
vbird tsai <==因為 username 已經設定了，所以使用舊有的設定而不以 root 取代